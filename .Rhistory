y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states2$ST == "US", 20, 10),
color = ifelse(base_aux_states2$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states2$ST, "<br>",
"Growth: ", round(base_aux_states2$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states2$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
library(plotly)
f <- "https://raw.githubusercontent.com/renanxcortes/repo_for_supplementary_files/master/data_issue_1351.csv"
base_aux_states <- readr::read_csv(f) %>%
filter(Seasonal_Type == "URN", year == 2018, month == 1)
# Scatter Plot
base_aux_states %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states$ST == "US", 20, 10),
color = ifelse(base_aux_states$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
data <- readRDS("data_issue_1351.rds")
base_aux_states2 = data %>%
filter(Seasonal_Type == "URN",
year == 2018,
month == 1) #%>%
# Scatter Plot
base_aux_states2 %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states2$ST == "US", 20, 10),
color = ifelse(base_aux_states2$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states2$ST, "<br>",
"Growth: ", round(base_aux_states2$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states2$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
data <- readRDS("data_issue_1351.rds")
base_aux_states = data %>%
filter(Seasonal_Type == "URN",
year == 2018,
month == 1) #%>%
# Scatter Plot
base_aux_states %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states$ST == "US", 20, 10),
color = ifelse(base_aux_states$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
setwd("C:\\Users\\renan\\Desktop\\repo_for_supplementary_files")
library(tidyverse)
library(plotly)
data <- readRDS("data_issue_1351.rds")
base_aux_states = data %>%
filter(Seasonal_Type == "URN",
year == 2018,
month == 1) #%>%
setwd("C:\\Users\\renan\\Desktop\\spatial-labor-market-monitor")
data <- readRDS("data_issue_1351.rds")
base_aux_states = data %>%
filter(Seasonal_Type == "URN",
year == 2018,
month == 1) #%>%
# Scatter Plot
base_aux_states %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states$ST == "US", 20, 10),
color = ifelse(base_aux_states$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
f <- "https://raw.githubusercontent.com/renanxcortes/repo_for_supplementary_files/master/data_issue_1351.csv"
base_aux_states <- readr::read_csv(f) %>%
filter(Seasonal_Type == "URN", year == 2018, month == 1)
base_aux_states$ST
data <- readRDS("data_issue_1351.rds")
base_aux_states2 = data %>%
filter(Seasonal_Type == "URN",
year == 2018,
month == 1) #%>%
base_aux_states2$ST
str(base_aux_states)
str(base_aux_states2)
glimpse(base_aux_states)
glimpse(base_aux_states2)
data <- readRDS("https://github.com/renanxcortes/repo_for_supplementary_files/blob/master/data_issue_1351.rds")
base_aux_states2 = data %>%
dplyr::filter(Seasonal_Type == "URN",
year == 2018,
month == 1) #%>%
# Scatter Plot
base_aux_states %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states$ST == "US", 20, 10),
color = ifelse(base_aux_states$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
# Scatter Plot
base_aux_states2 %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = ifelse(base_aux_states2$ST == "US", 20, 10),
color = ifelse(base_aux_states2$ST == "US", "red","#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states2$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states2$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
nb = poly2nb(SegP5)
nb_mat = nb2mat(nb)
nb_mat_stand = nb_mat / sum(nb_mat)
seg(data = SegP5@data, nb = nb_mat_stand) # Modified D (contiguity) (DM)
seg(data = SegP2@data, nb = nb_mat_stand) # Modified D (contiguity) (DM)
nb = poly2nb(SegP2)
nb_mat = nb2mat(nb)
nb_mat_stand = nb_mat / sum(nb_mat)
seg(data = SegP2@data, nb = nb_mat_stand) # Modified D (contiguity) (DM)
nb = poly2nb(SegP4)
nb_mat = nb2mat(nb)
nb_mat_stand = nb_mat / sum(nb_mat)
seg(data = SegP2@data, nb = nb_mat_stand) # Modified D (contiguity) (DM)
nb = poly2nb(SegP4)
nb_mat = nb2mat(nb)
nb_mat_stand = nb_mat / sum(nb_mat)
seg(data = SegP2@data, nb = nb_mat) # Modified D (contiguity) (DM)
nb = poly2nb(SegP4)
nb_mat = nb2mat(nb)
nb_mat_stand = nb_mat / sum(nb_mat)
seg(data = SegP4@data, nb = nb_mat) # Modified D (contiguity) (DM)
nb = poly2nb(SegP5)
nb_mat = nb2mat(nb)
nb_mat_stand = nb_mat / sum(nb_mat)
seg(data = SegP5@data, nb = nb_mat) # Modified D (contiguity) (DM)
nb = poly2nb(SegP5)
nb_mat = nb2mat(nb)
seg(data = SegP5@data, nb = nb_mat_stand) # Modified D (contiguity) (DM)
nb_mat_stand = nb_mat / sum(nb_mat)
nb_mat_stand
base_aux_states
setwd("C:\\Users\\renan\\Desktop\\spatial-labor-market-monitor")
base_aux_states <- readRDS("data_issue_1351.rds") %>%
#ungroup() %>%
filter(Seasonal_Type == "URN", year == 2018, month == 1)
base_aux_states
base_aux_states <- readRDS("data_issue_1351.rds") %>%
#ungroup() %>%
filter(Seasonal_Type == "URN", year == 2018, month == 1)
# Scatter Plot
base_aux_states %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = if_else(base_aux_states$ST == "US", 20, 10),
color = if_else(base_aux_states$ST == "US", "red", "#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
base_aux_states <- readRDS("data_issue_1351.rds") %>%
ungroup() %>%
filter(Seasonal_Type == "URN", year == 2018, month == 1)
# Scatter Plot
base_aux_states %>%
plot_ly(x = ~Ace,
y = ~Var,
type = 'scatter',
mode = 'markers',
marker = list(size = if_else(base_aux_states$ST == "US", 20, 10),
color = if_else(base_aux_states$ST == "US", "red", "#004B82")
),
hoverinfo = "text",
text = paste("", base_aux_states$ST, "<br>",
"Growth: ", round(base_aux_states$Var, 3), "<br>",
"Acelleration: ", round(base_aux_states$Ace, 3)),
showlegend = TRUE) %>%
layout(title = paste0("Example Graph"))
x1 <- c(1,2,3)
x2 <- c(1,2,3)
x1 %*% t(x2)
x1 %+% t(x2)
writeOGR(SegP1, "C:\\Users\\renan\\Desktop\\full_count_2010", "SegP1", driver="ESRI Shapefile")
writeOGR(SegP3, "C:\\Users\\renan\\Desktop\\full_count_2010", "SegP3", driver="ESRI Shapefile")
ls()
3820/2
shiny::runApp()
shiny::runApp()
runApp()
1294*500
1294*500/60
1294*500/60/60
1294*500/60/60/24
shiny::runApp()
library(shinythemes)
runApp()
runApp()
help(shinytheme)
runApp()
runApp()
library(shiny)
library(leaflet)
library(tidyverse)
library(plotly)
library(data.table)
library(rmapshaper)
library(lubridate)
library(mFilter)
library(shinythemes)
# To avoid masking
select <- dplyr::select
filter <- dplyr::filter
county_corresp <- readRDS('county_corresp.rds')
df_states_pre    <- readRDS("df_states.rds")
df_counties_pre  <- readRDS("df_counties.rds")
map_counties <- readRDS("map_counties_simplified.rds") # ms_simplify(readRDS("map_counties.rds"))
map_states   <- readRDS("map_states_simplified.rds") # ms_simplify(readRDS("map_states.rds"))
states_pop   <- readRDS("states_yearly_population.rds")
counties_pop <- readRDS("counties_yearly_population.rds")
df_states <- df_states_pre %>%
left_join(states_pop, by = c("ST" = "ST", "year" = "year"))
df_counties <- df_counties_pre %>%
#select(-ST) %>%
left_join(counties_pop, by = c("ST" = "ST", "Desc_Reg" = "Desc_Reg", "year" = "year"))
return_month <- Vectorize(function(num_mon) {switch(as.character(num_mon),
"1" = "January",
"2" = "February",
"3" = "March",
"4" = "April",
"5" = "May",
"6" = "June",
"7" = "July",
"8" = "August",
"9" = "September",
"10" = "October",
"11" = "November",
"12" = "December")})
# To inspect app performance:
# library(profvis)
# profvis({
#   runApp("path_to_app", display.mode = "normal")
# })
head(df_states)
unique(df_states$ST_Name)
unique(df_states$ST_Name) != "United States"
unique(df_states$ST_Name)[unique(df_states$ST_Name) != "United States"]
runApp()
state_selected <- "California"
input_year = 2016
input_month = 8
base_aux_county = df_counties %>%
filter(year == input_year,
month == input_month,
ST_Name == state_selected)# %>%
head(base_aux_county)
# Maps
map_ST <- map_counties[map_counties$STATEFP == str_pad(unique(filter(county_corresp, STATE == state_selected)$STATEFP), 2, pad = "0"),]
df_mapa <- merge(map_ST,
base_aux_county,
by.x = "NAMELSAD",
by.y = "Desc_Reg")
gradiente = colorNumeric(rev(c("#6A1103",
"#BA0004",
"#E7400B",
"#FEA527",
"#FDFE65",
"#9CE400",
"#359800")), domain = df_mapa$UR)
head(map_counties)
head(map_counties@data)
head(county_corresp)
head(county_corresp)
runApp()
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
gentelellaPage()
shinyApp(
ui = gentelellaPageCustom(
title = "Shiny Gentelella",
navbar = gentelellaNavbar(
navbarItems = notif(
id = "menunotif",
icon = "envelope-o",
status = "primary",
expanded = FALSE,
lapply(X = 1:5, FUN = function(i) {
notifItem(
title = "John Doe",
date = "3 min ago",
img = paste0("https://image.flaticon.com/icons/svg/163/16382", i,".svg"),
"Film festivals used to be do-or-die moments
for movie makers. They were where..."
)
})
)
),
sidebar = gentelellaSidebar(
uiOutput("profile"),
sidebarDate(),
sidebarMenu(
sidebarItem(
"Tab 1",
tabName = "tab1",
icon = "bar-chart",
badgeName = "new",
badgeStatus = "danger"
),
sidebarItem(
"Tab 2",
tabName = "tab2",
icon = "info"
)
)
),
body = gentelellaBody(
tabItems(
tabItem(
tabName = "tab1",
fluidRow(
column(
width = 4,
align = "center",
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
column(
width = 8,
align = "center",
plotOutput("distPlot")
)
)
),
tabItem(
tabName = "tab2",
jumbotron(
title = "Hello, world!",
"This is a simple hero unit, a simple jumbotron-style
component for calling extra attention to featured
content or information."
)
)
)
),
footer = gentelellaFooter()
),
server = function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
counter <- reactiveValues(connect = 0)
observeEvent(counter$connect == 0, {
inputSweetAlert(
session = session,
inputId = "name",
title = "What's your name ?"
)
})
output$profile <- renderUI({
sidebarProfile(
name = input$name,
img = "https://image.flaticon.com/icons/svg/236/236831.svg"
)
})
}
)
library(gentelellaShiny)
library(shiny)
library(gentelellaShiny)
library(shinyWidgets)
shinyApp(
ui = gentelellaPageCustom(
title = "Shiny Gentelella",
navbar = gentelellaNavbar(
navbarItems = notif(
id = "menunotif",
icon = "envelope-o",
status = "primary",
expanded = FALSE,
lapply(X = 1:5, FUN = function(i) {
notifItem(
title = "John Doe",
date = "3 min ago",
img = paste0("https://image.flaticon.com/icons/svg/163/16382", i,".svg"),
"Film festivals used to be do-or-die moments
for movie makers. They were where..."
)
})
)
),
sidebar = gentelellaSidebar(
uiOutput("profile"),
sidebarDate(),
sidebarMenu(
sidebarItem(
"Tab 1",
tabName = "tab1",
icon = "bar-chart",
badgeName = "new",
badgeStatus = "danger"
),
sidebarItem(
"Tab 2",
tabName = "tab2",
icon = "info"
)
)
),
body = gentelellaBody(
tabItems(
tabItem(
tabName = "tab1",
fluidRow(
column(
width = 4,
align = "center",
sliderInput(
"obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500
)
),
column(
width = 8,
align = "center",
plotOutput("distPlot")
)
)
),
tabItem(
tabName = "tab2",
jumbotron(
title = "Hello, world!",
"This is a simple hero unit, a simple jumbotron-style
component for calling extra attention to featured
content or information."
)
)
)
),
footer = gentelellaFooter()
),
server = function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
counter <- reactiveValues(connect = 0)
observeEvent(counter$connect == 0, {
inputSweetAlert(
session = session,
inputId = "name",
title = "What's your name ?"
)
})
output$profile <- renderUI({
sidebarProfile(
name = input$name,
img = "https://image.flaticon.com/icons/svg/236/236831.svg"
)
})
}
)
runApp()
runApp()
