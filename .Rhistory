shiny::runApp()
runApp()
runApp()
# Working Age Population Grab Data
string_grab = c("POPTOTUSA647NWDB", paste0(states_initials, "POP"))
# Code to extract data from FRED
library(alfred)
library(tidyverse)
library(lubridate)
library(plotly)
library(zoo)
library(data.table)
library(BBmisc)
library(rgdal)
library(leaflet)
library(jsonlite)
# To avoid masking
select <- dplyr::select
filter <- dplyr::filter
# Auxiliary Functions
calculate_acum_growth_S_months    <- function(x, s) { aux <- rollapply(x, width = s, FUN = sum); return(c(rep(NA, s - 1),(aux / lag(aux, s) - 1) * 100)) }
calc_ace <- function(x) {aux <- diff(x); return(c(NA, aux))}
return_month <- Vectorize(function(num_mon) {switch(as.character(num_mon),
"1" = "January",
"2" = "February",
"3" = "March",
"4" = "April",
"5" = "May",
"6" = "June",
"7" = "July",
"8" = "August",
"9" = "September",
"10" = "October",
"11" = "November",
"12" = "December")})
return_state <- Vectorize(function(state_initial) {switch(as.character(state_initial),
"AL" = "Alabama",
"AK" = "Alaska",
"AZ" = "Arizona",
"AR" = "Arkansas",
"CA" = "California",
"CO" = "Colorado",
"CT" = "Connecticut",
"DE" = "Delaware",
"DC" = "District of Columbia",
"FL" = "Florida",
"GA" = "Georgia",
"HI" = "Hawaii",
"ID" = "Idaho",
"IL" = "Illinois",
"IN" = "Indiana",
"IA" = "Iowa",
"KS" = "Kansas",
"KY" = "Kentucky",
"LA" = "Louisiana",
"ME" = "Maine",
"MD" = "Maryland",
"MA" = "Massachusetts",
"MI" = "Michigan",
"MN" = "Minnesota",
"MS" = "Mississippi",
"MO" = "Missouri",
"MT" = "Montana",
"NE" = "Nebraska",
"NV" = "Nevada",
"NH" = "New Hampshire",
"NJ" = "New Jersey",
"NM" = "New Mexico",
"NY" = "New York",
"NC" = "North Carolina",
"ND" = "North Dakota",
"OH" = "Ohio",
"OK" = "Oklahoma",
"OR" = "Oregon",
"PA" = "Pennsylvania",
"RI" = "Rhode Island",
"SC" = "South Carolina",
"SD" = "South Dakota",
"TN" = "Tennessee",
"TX" = "Texas",
"UT" = "Utah",
"VT" = "Vermont",
"VA" = "Virginia",
"WA" = "Washington",
"WV" = "West Virginia",
"WI" = "Wisconsin",
"WY" = "Wyoming",
"US" = "United States")})
extract_4_upper <- function(x) {x %>% str_replace_all(" ", "") %>% toupper %>% str_sub(1, 4)}
# Maps
map_STATES   <- readOGR("C:\\Users\\renan\\Desktop\\CSI Project\\cb_2017_us_state_500k", 'cb_2017_us_state_500k')
map_COUNTIES <- readOGR("C:\\Users\\renan\\Desktop\\CSI Project\\tl_2017_us_county", 'tl_2017_us_county')
# County correspondence table and List of US States initials
state_init_correp <- readRDS("state_init_corresp.rds") %>% mutate(ST_Initial = as.character(ST_Initial))
county_corresp <- tbl_df(fread("national_county.txt",
col.names = c("STATE", "STATEFP", "COUNTYFP", "COUNTYNAME", "CLASSFP"))) %>%
mutate(COUNTYFP = str_pad(COUNTYFP, width = 3, pad = "0"),
CN4 = extract_4_upper(COUNTYNAME),
STCN4 = paste0(STATE, CN4)) %>%
inner_join(state_init_correp, by = c("STATE" = "ST_Initial"))
states_initials <- unique(county_corresp$STATE)
# Just modified a little bit in order to use the column name "dplyr's wise"
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
get_fred_series_paese <- function(series_id, series_name = NULL,
observation_start = NULL, observation_end = NULL) {
length_series_id <- nchar(series_id)
if (is.character(series_id) == FALSE) {
stop("series_id is always in characters")
}
if (is.null(series_name) == TRUE ) {
series_name <- series_id
}
if (is.null(observation_start) == TRUE) {
observation_start <- "1776-07-04"
}
if (is.null(observation_end) == TRUE) {
observation_end <- "9999-12-31"
}
df_series <-
try({
fromJSON(
paste0("https://api.stlouisfed.org/fred/series/observations?series_id=",
series_id,
"&observation_start=",
observation_start,
"&observation_end=",
observation_end,
"&output_type=2",
"&api_key=98f9f5cad7212e246dc5955e9b744b24&file_type=json")
)$observations %>%
mutate_(date = ~as_date(date))
}, silent = TRUE)
print(class(df_series))
if (!class(df_series) == "try-error") {
colnames(df_series)[!(colnames(df_series) %in% "date")] <- series_name
df_series[, 2] <- as.numeric(unlist(df_series[, 2]))
df_series
} else {
df_series <- tibble(date = as.Date(NA))
}
}
# Working Age Population Grab Data
string_grab = c("POPTOTUSA647NWDB", paste0(states_initials, "POP"))
create_df <- function(i) {
x <- get_fred_series_paese(string_grab[i])
if (!is.error(x)) # Even if FRED doesn't the series, it won't stop
{x} else
{tibble(date = as.Date(NA))}}
data_states_pop = 1:length(string_grab) %>%
map(create_df) %>%
reduce(full_join, by = "date") %>%
completeFun("date")
head(data_states_pop)
runApp()
head(data_states_pop)
data_states_pop %>%
gather(Raw_Type, UR, -date)
data_states_pop %>%
gather(Raw_Type, UR, -date) %>%
mutate(series_id = Raw_Type)
data_states_pop %>%
gather(series_id, UR, -date)
data_states_pop %>%
gather(series_id, UR, -date) %>%
separate(Raw_Type, into = c("ST", "Rest"), sep = c(2))
data_states_pop %>%
gather(series_id, UR, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2))
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest, -VAR) %>%
mutate(year = year(date),
month = month(date))
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date),
month = month(date))
states_initials
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date),
month = month(date)) %>%
arrange(year, month)
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date),
month = month(date)) %>%
arrange(year, month) %>%
mutate(ST = ifelse(ST == "PO", "US", ST))
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date)) %>%
arrange(year, month) %>%
mutate(ST = ifelse(ST == "PO", "US", ST))
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date))
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date),
ST = ifelse(ST == "PO", "US", ST)) %>%
arrange(year, ST)
data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date),
ST = ifelse(ST == "PO", "US", ST)) %>%
arrange(ST, year)
library(shiny)
library(leaflet)
library(tidyverse)
library(plotly)
library(data.table)
library(lubridate)
# To avoid masking
select <- dplyr::select
filter <- dplyr::filter
county_corresp <- readRDS('county_corresp.rds')
df_states    <- readRDS("df_states.rds")
df_counties  <- readRDS("df_counties.rds")
map_counties <- readRDS("map_counties.rds")
map_states   <- readRDS("map_states.rds")
head(df_states)
data_clean_states_pop <- data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
select(-Rest) %>%
mutate(year = year(date),
ST = ifelse(ST == "PO", "US", ST)) %>%
arrange(ST, year)
head(data_clean_states_pop)
data_clean_states_pop <- data_states_pop %>%
gather(series_id, Pop, -date) %>%
separate(series_id, into = c("ST", "Rest"), sep = c(2)) %>%
mutate(year = year(date),
ST = ifelse(ST == "PO", "US", ST)) %>%
select(-Rest, -date) %>%
arrange(ST, year)
data_clean_states_pop
head(data_clean_states_pop)
head(df_states %>%
filter(year == input_year,
month == input_month) %>%
arrange(ST_Name))
input_year = 2010
input_month = 6
head(df_states %>%
filter(year == input_year,
month == input_month) %>%
arrange(ST_Name))
df_states %>%
filter(year == input_year,
month == input_month) %>%
arrange(ST_Name) %>%
inner_join(data_clean_states_pop, by = c("year", "ST"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("Rcpp", "httpuv", "shiny"))
devtools::install_github("rstudio/leaflet")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
